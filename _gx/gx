#!/bin/bash
shopt -s nullglob

MANIFESTS="3d anime atlas banner bg campaign card cardsm chara comic dailybonus gachaselect item jacket live loginbonus master musicscores room skill story tutorial"

# define this as an environment variable.
# default is fairly outdated, use versioncheck.py to get the current version from the server.
if [[ -z "$VERSION" ]]; then
    VERSION=10011200
fi

BASEURL="http://storage.game.starlight-stage.jp/dl/$VERSION/High/AssetBundles/Android"

SCRIPT_PATH=`dirname "$0"`; SCRIPT_PATH=`eval "cd \"$SCRIPT_PATH\" && pwd"`
CURLFLAGS="-#"

get_manifest() {
    local MANIFEST=$1; shift
    >&2 echo "===> Downloading manifest for $MANIFEST."
    curl $CURLFLAGS "$BASEURL/manifest/${MANIFEST}_assetmanifest" | cut -f 1-2 -d, | tr , " "
}

download_new_file() {
    local FILE=$1; shift
    local DESTINATION=$1; shift
    local RIP_DIR=$1; shift

    >&2 echo "---> Downloading new version of file $FILE."

    if [[ "$DRY_RUN" -ne 0 ]]; then
        return
    fi

    curl $CURLFLAGS $FILE > $DESTINATION
    mkdir -p "$(dirname $DESTINATION)/.shadow"
    > "$(dirname $DESTINATION)/.shadow/$(basename $DESTINATION)" openssl md5 < $DESTINATION

    >&2 $SCRIPT_PATH/bin/ripper.sh $RIP_DIR $DESTINATION

    echo $DESTINATION
}

check_file() {
    local FILE=$1; shift
    local EXPECT_MD5=$1; shift

    [[ -f $FILE ]] || return 2

    if [[ $(cat < $(dirname $FILE)/.shadow/$(basename $FILE)) == "$EXPECT_MD5" ]]; then
        return 0
    else
        return 1
    fi
}

check_file_wrapper() {
    local STORE=$1; shift
    local DECODED=$1; shift
    local FILENAME=$1; shift
    local MD5=$1; shift

    local SCRUBBED_FILENAME=$(echo $FILENAME | sed 's|/|_|g')
    check_file $STORE/$SCRUBBED_FILENAME $EXPECT_MD5 || download_new_file $BASEURL/$FILE $STORE/$SCRUBBED_FILENAME $DECODED
}

### tab management

source_job() {
    local TAB=$1; shift
    local WANT=""
    local FILTERS=""

    want() {
        WANT="$WANT $@"
    }

    filter_with() {
        FILTERS="$FILTERS $@"
    }

    any() {
        return 0
    }

    flush() {
        mkdir -p _store

        process_one() {
            local STORE=$1; shift
            local DECODED=$1; shift

            while read FILE EXPECT_MD5; do
                if [[ "x$FILE" != "x" ]]; then

                    for FILTER_NAME in $FILTERS; do
                        $FILTER_NAME $FILE && ( check_file_wrapper $STORE $DECODED $FILE $EXPECT_MD5 )
                    done
                fi
            done
        }

        for MANIFEST in $WANT; do
            mkdir -p _store/$MANIFEST/.shadow
            get_manifest $MANIFEST | process_one "_store/$MANIFEST" "_decoded/$MANIFEST"
        done

        unset -f process_one
        FILTERS=""
        WANT=""
    }

    source $TAB

    unset -f want filter_with any flush
}

export DRY_RUN=0
if [[ "$1" = "dry-run" ]]; then
    export DRY_RUN=1
    shift
fi

>&2 echo ":: GX 1. at $(hostname) $(date) (dry run: $DRY_RUN)"

if [[ "$#" == "0" ]]; then
    for TAB in *.job; do
        >&2 echo "Executing $TAB."
        source_job $TAB
    done
else
    while (( $# )); do
        TAB=$1; shift
        >&2 echo "Executing $TAB."
        source_job $TAB
    done
fi
